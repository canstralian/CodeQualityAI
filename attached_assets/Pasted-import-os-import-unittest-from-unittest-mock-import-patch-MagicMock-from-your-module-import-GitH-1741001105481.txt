import os
import unittest
from unittest.mock import patch, MagicMock
from your_module import GitHubOAuth  # Replace 'your_module' with the actual module name

class TestGitHubOAuthPositive(unittest.TestCase):

    @patch.dict(os.environ, {"GITHUB_CLIENT_ID": "test_client_id", "GH_CLIENT_SECRET": "test_client_secret"})
    def test_initialization(self):
        """Test that GitHubOAuth initializes with correct environment variables."""
        oauth = GitHubOAuth()
        self.assertEqual(oauth.client_id, "test_client_id")
        self.assertEqual(oauth.client_secret, "test_client_secret")
        self.assertEqual(oauth.base_url, "https://github.com")
        self.assertEqual(oauth.api_url, "https://api.github.com")

    @patch.dict(os.environ, {"GITHUB_CLIENT_ID": "test_client_id", "GH_CLIENT_SECRET": "test_client_secret"})
    def test_get_authorization_url_without_state(self):
        """Test the authorization URL is generated correctly without state."""
        oauth = GitHubOAuth()
        expected_url = "https://github.com/login/oauth/authorize?client_id=test_client_id&scope=repo%2Cread%3Auser%2Cuser%3Aemail"
        self.assertEqual(oauth.get_authorization_url(), expected_url)

    @patch.dict(os.environ, {"GITHUB_CLIENT_ID": "test_client_id", "GH_CLIENT_SECRET": "test_client_secret"})
    def test_get_authorization_url_with_state(self):
        """Test the authorization URL is generated correctly with state."""
        oauth = GitHubOAuth()
        expected_url = "https://github.com/login/oauth/authorize?client_id=test_client_id&scope=repo%2Cread%3Auser%2Cuser%3Aemail&state=test_state"
        self.assertEqual(oauth.get_authorization_url(state="test_state"), expected_url)

    @patch.dict(os.environ, {"GITHUB_CLIENT_ID": "test_client_id", "GH_CLIENT_SECRET": "test_client_secret"})
    @patch('requests.post')
    def test_exchange_code_for_token_success(self, mock_post):
        """Test exchanging code for token returns expected result on success."""
        oauth = GitHubOAuth()
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"access_token": "test_access_token"}
        mock_post.return_value = mock_response

        result = oauth.exchange_code_for_token("test_code")
        self.assertEqual(result, {"access_token": "test_access_token"})

    @patch.dict(os.environ, {"GITHUB_CLIENT_ID": "test_client_id", "GH_CLIENT_SECRET": "test_client_secret"})
    @patch('requests.get')
    def test_get_user_info_success(self, mock_get):
        """Test getting user info returns expected result on success."""
        oauth = GitHubOAuth()
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"login": "test_user"}
        mock_get.return_value = mock_response

        result = oauth.get_user_info("test_access_token")
        self.assertEqual(result, {"login": "test_user"})

    @patch.dict(os.environ, {"GITHUB_CLIENT_ID": "test_client_id", "GH_CLIENT_SECRET": "test_client_secret"})
    @patch('requests.get')
    def test_get_user_info_with_none_access_token(self, mock_get):
        """Test getting user info returns None when access token is None."""
        oauth = GitHubOAuth()
        result = oauth.get_user_info(None)
        self.assertIsNone(result)

    @patch.dict(os.environ, {"GITHUB_CLIENT_ID": "test_client_id", "GH_CLIENT_SECRET": "test_client_secret"})
    def test_redirect_uri_initialization(self):
        """Test that redirect_uri is initialized correctly from environment variable."""
        os.environ["GITHUB_REDIRECT_URI"] = "http://localhost/callback"
        oauth = GitHubOAuth()
        self.assertEqual(oauth.redirect_uri, "http://localhost/callback")